#import the packages
import pandas as pd 
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
%matplotlib inline 
from sklearn.model_selection import train_test_split

import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split 

from sklearn.metrics import classification_report, accuracy_score  
from sklearn.metrics import confusion_matrix 
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
import seaborn as sns



#uploading the dataset
data_df=pd.read_csv('creditcard.csv')



#Display head top five rows
data_df.head()



#Show the number of rows and colums
data_df.shape


#Describe the colums i.e, mean, sd etc
data_df[['Amount','Time','Class']].describe()



#Show the columns
data_df.columns



#Show any null values
data_df.isna().any()



#Tail of a column
data_df['Class'].tail(10)



#Percentage of total not fraud transaction
nfcount=0
notFraud=data_df['Class']
for i in range(len(notFraud)):
    if notFraud[i]==0:
        nfcount=nfcount+1

nfcount
per_nf=(nfcount/len(notFraud))*100
print('percentage of not fraud transactions on the datase:', per_nf)




#Percentage of total fraud transaction
fcount=0
Fraud=data_df['Class']
for i in range(len(Fraud)):
    if Fraud[i]==1:
        fcount=fcount+1

fcount
per_f=(fcount/len(Fraud))*100
print('percentage of fraud transactions on the datase:', per_f)





#plot the data
plot_data=pd.DataFrame()
plot_data['transactions']=data_df['Class']
plot_data



#Barplot
plt.title("Bar Plot for Fraud vs Genuine Transactions")
sns.barplot(x='Fraud Transaction',y='Genuine Transaction',data=plot_data, palette='Blues',edgecolor='W')




x=data_df['Amount']
y=data_df['Time']
plt.plot(x,y)
plt.title('Time vs Amount')
#sns.barplot(x=x,y=y,data=data,palette='Blues',edgecolor='w')




#Distplot
plt.figure(figsize=(10,8), )
plt.title('Amount Distribution')

sns.distplot(data_df['Amount'],color='red')




#outliers
fig,ax = plt.subplots(figsize=(16,8))
ax.scatter(data_df['Amount'],data_df['Time'])
ax.set_xlabel('Amount')
ax.set_ylabel('Time')
plt.show()



#Correlation Matrix
correlation_metrics=data_df.corr()
fig=plt.figure(figsize=(14,9))
sns.heatmap(correlation_metrics, vmax=.9,square=True)
plt.show()



#split the train and test dataset
x=data_df.drop(['Class'], axis = 1)#drop the target variable
y=data_df['Class']
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size = 0.2, random_state = 42) 



#Logistic Regression
LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=100,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)




y_pred = logisticreg.predict(xtest)
accuracy= logisticreg.score(xtest,ytest)





#Confusion Matrix
cm = metrics.confusion_matrix(ytest, y_pred)
print(cm)



#Accuracy Calculation 
print('Accuracy score of the Logistic regression model: ', accuracy*100,'%')









